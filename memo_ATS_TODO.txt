□まだ    (not yet)
■対応済み(done)
-------------------


640X400(現画面)		frame(0,x,y)

640X400(fix, undo)	frame(1,x,y)


frame320point(0,x,y)	ライトテーブルがオンの場合の描画画面
	320X200(push0,pop0)	
		通常	scrntoems((2+1)*animofset+1)
		lt_on	frame320toems(0,(2+1)*animofset+1)

frame320point(1,x,y)	ブラシ, アニメブラシの作業画面
	ブラシ作業画面の退避フレーム	cutbrushpage := (2+1)*animofset+3
		frame320toems(1,cutbrushpage)
	□スペアブラシの退避フレーム	(2+1)*animofset+4
		
	アニメブラシの保存フレーム
		AnimNo.2 ((1+1)*animofset+1〜n)

	ブラシfig, アニメブラシfig の場合の参照フレーム
		blbrushpoint(x,y) →  frame320point(1,x,y)
		現状: 小数点を上下・左右のpointに振り分け、平均をとっている
			□3X3=9point での処理に変更

paintframe(x,y)		paintルーチンでの作業フレーム
	paintframe は、frame320 なので 640X400 に対応不可
	→ 訂正: paintframe は、640X400 1plane 単色


■scrntoframe320ルーチン作成が必要か？(fix0, undo0)
	(640X400(fix, undo) の場合は、実vramにマッピングされたframe間copy)
	frame320toframe は、frame1 しか対応していない(実vramは、frame0)
		GRAD2.PAS に類似ルーチン有
	■frame320toframe → frame320toframe1 に名称変更(undoバッファにコピー)
		FRAMELIB.PAS, PGLOBAL.PAS, USR2.PAS を変更
	■frametoframe320 → frame1toframe320 に名称変更(undoバッファからコピー)
		FRAMELIB.PAS, PGLOBAL.PAS, USR2.PAS を変更
	■frame320toframe0 を追加(実vramにコピー)
		FRAMELIB.PAS を変更
	■frame0toframe320 を追加(実vramからコピー)
		FRAMELIB.PAS を変更


□animofset(AMIGA2.PAS, A2.PAS) の変更 68 → 128 (16*8)
	EMS使用ページ数  915 ( > 128*3*2=768 )
■(2+1)*animofset+1  320X200画面の push0, pop0
	□ライトテーブルの追加フレームとして共有して問題ないか検討する
□(2+1)*animofset+2  320X200画面の作業フレーム
	□move_emsframe(a,b) を追加 (FRAMELIB.PAS)
	□swap_emsframe(a,b) を追加 (FRAMELIB.PAS)
	□sWap push0 を、この作業フレームを利用する方法に変更
		□upicop.pas を変更
		□PGLOBAL.PAS を変更
■(2+1)*animofset+3  ブラシ作業画面の退避フレーム
	□current_br_page := (2+1)*animofset+3
□(2+1)*animofset+4〜12 (current_br_page + 1〜9)  スペアブラシの退避フレーム
□(2+1)*animofset+13,14,15,16 を作業画面の退避用バッファとして確保
	実装予定のスプライトチップ・エディタでの画面退避




screen0 → screen1 のコピールーチンは、paintframe と等価なバッファを new で確保
	□どちらも共通にして、必要時に new で確保するようにすることを検討
	USR2 に|grad塗|を追加する場合、paintframe をクリアせずに再利用する必要有り

□マッピングされたEMSフレームを直接 frame320 として扱えないか検討


■アニムフレーム数を変えた場合、ブラシや退避フレームがズレる
	→ DOS\setup2 で、EMSフレームの割当てを animofset*3 以上で確保していなかった

--------------------------------------------------------------------------


■Screen 640X400 の画像を保存するルーチンが無い
	→ AGRAPH2.PAS の IFFsave ルーチンに、640X400画像モードを追加
	そのルーチンを呼び出している uemsop.pas, picop.pas を変更
	(640X400画像の色-明度順ソートは、picop.pas の compress1/n メニューの中)

□MAG形式画像のLoad
	→ MPS のサンプルコードを実装してみたが、buffer=64K 以上のファイルでエラー
		IFF-load のように逐次blockread のメドがつくまで保留
	■新たに ULOADER.PAS を追加して、異形式画像ローダーをまとめる
		■AGRAPH2.PAS, UPICOP.PAS よりMAG画像のロードルーチンを削除
	■MAG画像のロード(MPS のサンプルコード)をサポート
		□buffer=64K より大きいファイルに対応
			■暫定処置として、64Kサイズを超える場合は処理をスキップ
	■FRM画像(エスキース、マルチペイント)のロードをサポート
		直接vram0にロード不能?なので、new(vramb)を中間バッファにした
		パレットファイルがあれば読み込む
		■パレットファイルが無い場合にエラー
		→ loadpal でエラー判定の前に exist(pal_path) でエラー判定する
	■FRM画像のセーブをサポート、パレットファイルもセーブ
	■iffsaveルーチンより高速なので、>tmp の処理を置換え(パレットはセーブしない)
		■AGRAPH2.PAS にFRM画像のload&saveルーチンを移行
			■UPICOP.PAS のルーチンを入れ替え
			■SCREENOP.PAS のルーチンを入れ替え
			■PGLOBAL.PAS にルーチンを追加
				■[<],[>],[,],[.]キー割り当ての変更・追加
				(copyanimnext, copyanimback とキーが重複するため)
				■[6],[7]の機能を入れ替えた
		■AGRAPH2.PAS にパレットのload&saveルーチンを移行
			■PALOP.PAS の該当ルーチンを削除
	□CEL画像(KISS 着せ替えのパーツ)のロードをサポート
		□KCFファイル画像(KISS 着せ替えのパレット)のロードをサポート
	□ARV画像(アートマスター、キャラクタツクール)のロードをサポート
	□ZIM画像(Z's staff Kid98)のロードをサポート
	■SMC画像(SMC-777C GEDIT)のロードをサポート
		仮想FDDイメージからファイルを取り出す 1DDTOOL.EXE は、16bitプログラム
			(64bitOS環境では) msdos 1DDTOOL.EXE r 仮想FDDイメージ
		L3ディスクエクスプローラ(L3 Disk Explorer) 
			SMC-777用に作成されたFDDイメージ内部のファイルにアクセス
		拡張子がPICのママだとX68Kの形式と区別できないので 'SMC' にリネーム
		ボーダーカラーの設定は無視する
	■partfilename(pathname : flnam; var dir,name,ext : flnam ) → AGRAPH2.PAS
		■disk関連のルーチンを AGRAPH2.PAS に集約
		■AGRAPH2.PAS から 常駐パレット, child communicate 関連を削除


■\PST からの include を廃止、sysbrush.inc を親ディレクトリにコピー

■\PST に、リソース類を移動。(brush.ptn, tone.ptn, ... )

■HELP で、終了(右クリック)のチャタリング (PGLOBAL.PAS  procedure help)
	→ waitrbutton の後に offbutton を追加

■PALEDIT で、パレットの fix,undo が機能していない
	→ 機能していた



□AnimNoが0と決めうちしているところを修正して、任意のAnimNoに対応させる
□パレットの管理もAnimNoごとに行う
	□UEMSOP.PAS も変更



□トップメニューの検討 (UPAINT.PAS)
	描画|    |    |拡大|特筆|実験|    |    |Anim|画面|色  |設定|Help|終了
→	描画|変形|加工|特筆|実験|拡大|CELL| BG |Anim|画面|色  |設定|Help|終了
→→	描画|特筆|実験|図形|拡大|Brsh|CELL| BG |Anim|画面|色  |設定|Help|終了



■システム設定メニューの検討 (PGLOBAL.PAS  systemset)
	Screen| Micky| Grid | BrOfs|Brwait|AutoBr|Frm0&1|ExelBr|      | Info | Help 
→	Screen|Micky /BrWait/ Grid /exclBr|Br_ofs|AutoBr/Frm0&1|      | Info | Help 

□exclBr(グリッドが設定された場合のブラシカットのドット調整) の再検討
	■初期設定をONに変更、gridx <> 1 の場合のチェックを導入
		□gridx <> 1 の場合だけではなく、gridy <> 1 もチェック
		□それぞれで、処理を分ける(x:=x-1, y:=y-1)
	□逆から選択された場合の調整の処理をチェック
■アニメautoscreen で、同座標に連続してブラシを置く場合、br_wait_ON だと不便すぎる
	→ br_wait_ON のまま、lineツールで座標を記憶させて始点と終点を一致させ描画
■animframe0,1 の連動をデフォルトではOFFに変更



■描画設定メニューの検討 (SUBMENU.PAS  brushprefset)
	b-Hand|a-Hand|      |autoCt|dither| Light|      |      |      |      | Help
→	BrHand/AbHand/BrNot0/-Jaggy|階調塗/dither/autoCt/Scan幅/ + 縁 |透過台| Help
■メニューを分割
→	BrHand/AbHand/BrNot0/-Jaggy|      |      |      |      |      |透過台| Help
→	境界塗|free塗| 再塗 |境設定|Grad種/Grad色/回=   /dither/autoCt/幅=   |塗not0| ?

■/BrNot0/ ブラシの色0を透過色とみなす
	brushtype = (brover,brbeta) で切り替え
	■アニメブラシをベタで適用したい場合の設定が、カットブラシ側にしかない
	→こちらに移動(カットブラシ選択メニューも今後の追加ルーチン予定で残す)

■/-Jaggy| ブラシの拡大縮小処理の際、補完処理を行うかどうか
	明度順階調画像でない場合、補完処理をOFFできるようにする
	br_jaggy : boolean で切り替え
		PGLOBAL.PAS blbrushpoint ルーチンを変更
		PGLOBAL.PAS blpoint ルーチンもついでに変更
	[yes]	バイリニア補完(デフォルト)
	[no]	c = point(x,y)

□透過台(ライトテーブル) back2のフレーム番号を固定に切り替え可能に
	→ □現状の-1, -2 に追加フレームとして、emsframe (2+1)*animofset+5
	   □emsframe (2+1)*animofset+1 と共有して問題ないか検討する
	□画面 → 追加フレーム
	□画面・グリッド表示 → 追加フレーム
	□画面・パースガイド表示 → 追加フレーム
	□画面・透視ガイド表示 → 追加フレーム



□|画面|メニューの検討 (screenop.pas)
	表W裏|表>裏|表<裏| cls | rev |x反転|y反転|180転| >tmp| <tmp| Fix |Undo |Help

□|表>裏| → |表>Ov| に変更 (|表>裏| は、キーコマンドでサポート)
□|表<裏| → |表<Ud| に変更 (|表<裏| は、キーコマンドでサポート)
□|x反転|  fix したframe1を参照して処理
	8bitの反転は、テーブル処理(参考:pst1.5ソース bitrev.pas)
■テンポラリ画像ファイルへの入出力 >Tmp, <Tmp
	→ PIC\TMP.FRM に上書き保存
□フィルタ加工のメニューは、ここに入れられないか検討
□模様生成(セルオートマタ等)メニューは、ここに入れられないか検討


■[複]→[対]、[対]→[源]、[ M]→[⇒] に変更
	筆|色|覆|[]|B]|A]|複|対|効| M|
→	筆|色|[]/[B/[A|源/効|mk|対|⇒|

■Tile → 網 として、階層が上のメニューを 筆|色|網 に変更
	筆|色|網|[]/[B/[A|源/効|mk|対|⇒|



□|筆|メニューの検討
|標準筆7種|追加筆|  |←|[]|編|反| X| Y| T|逆|替| ?
|標準筆7種|定義筆|  |←|<<|編|反| X| Y| T|保|替| ?  BRUSH_02.PTN

□|  | 編集対象の筆(lastbrush)
□|←| 現在の筆を |  |(lastbrush) へコピー
□|[]| 画面から|  |筆を設定
	□筆パターンの画像を読み込む
	□現画面をバックアップ、リストア
□|<<| 編集対象の筆をユーザー定義へコピー  BRUSH_02.PTN
□|編| |  |筆編集モードへ移行
□|反| 編集対象の|  |筆を 反転
□| X| 編集対象の|  |筆を X-Flip
□| Y| 編集対象の|  |筆を Y-Flip
□| T| 編集対象の|  |筆を 90°右回転
□|逆| 標準筆7種の並びを逆にする
	□|保| ユーザー定義筆を保存   BRUSH_02.PTN
■|替| 筆定義ファイルの切り替え
	const  patternfilename : string[12] = 'BRUSH.PTN';
		→ var に変更 'BRUSH.PTN', 'BRUSH_01.PTN'
		→ ディレクトリ下に変更 string[16] = 'PST\BRUSH.PTN'
	■切り替え時、メニューの筆が二重に描画される
		→ dispbrushtable で、0の部分もカラー1で埋める
	□切り替え時、|  |筆を保護する
■メニュー選択で '|標準筆7種|追加筆|  |' 以外の場合、現在の筆番号を維持する



□|色| カラーサイクル・モード
	□ カレントカラー → サイクル
	□ スポイトカラー → サイクル
	□ 一定に色循環するモード
	□ ラインスタイルによって色循環するモード



□|網|メニューの検討
|B/ グラデ17種 /F|追加パターン|  |←|[]|編|反| X| Y| T|逆|替| ?
|追加パターン|追加定義パターン|  |←|<<|編|反| X| Y| T|保|替| ?  TONE_02.PTN

■|B/ 2色トーンパターンの bgbolor を選択
	■|B/ bgbolorが0の場合、画面の色を保護するように変更
		→ bgcolor=0 で、c=tempc とした(簡易解決)
		□Brshルーチンのように、独立して処理すべき？
	■デフォルトのbgcolor=0
■|F/ 2色トーンパターンの fgbolor(カレントカラー)を選択
	■TONE_02.PTN の場合を設定
□|  | 編集対象のパターン(lasttone)
□|←| 現在のパターンを |  |(lasttone) へコピー
□|[]| 画面から|  |パターンを設定
	□網パターンの画像を読み込む
	□(画面左上部)2色トーンパターン画像から、fgbolor,bgcolor,パターン番号を設定
	□(画面右下部)トーンパターン画像から、|  |(lasttone) へコピー
	□現画面をバックアップ、リストア
□|<<| 編集対象のパターンをユーザー定義へコピー  TONE_02.PTN
□|編| |  |パターン編集モードへ移行
□|反| 編集対象の|  |パターンを ビット反転
□| X| 編集対象の|  |パターンを X-Flip
□| Y| 編集対象の|  |パターンを Y-Flip
□| T| 編集対象の|  |パターンを 90°右回転
□|逆| グラデ17種のパターンをビット反転(並びが逆になる)
	□|保| ユーザー定義パターンを保存   TONE_02.PTN
■|替| パターン定義ファイルの切り替え。現状は|Tone|と共有
              	tonefilename    : string[12] = 'TONE.PTN';
		→ var に変更 'TONE.PTN', 'TONE_01.PTN'
		→ ディレクトリ下に変更 string[16] = 'PST\TONE.PTN'
	□切り替え時、|  |パターンを保護する
□メニュー選択で 'B/グラデ17種/F|追加パターン|  |' 以外の場合、現在の網番号を維持する
■カレントタイルの表示が見づらい
	→ disptiletable で、カレントタイルは枠をつけた


□(源)|網|メニューの検討
	□奇数行(16dot単位)を半ずらしパターン
	□奇数列(16dot単位)を半ずらしパターン
	□現在のパターンと|  |パターンを交互に千鳥配置
	□2色トーンパターンのグラデパターン間ローテート



□筆形状カットブラシ[] → パターンブラシ[] に変更
	(筆ルーチンを利用したカットだと15X15になっていてタイルペイントがいまいち)
○パターンブラシ[] 選択時
	□全角文字選択の削除
		□ファイルから選択した文字列をアニメパターンとする
	□2色タイルパターンの選択を追加(IFFファイル)
	□3色タイルパターン生成の選択を追加
	□パターンの選択を追加(IFFファイル)
	□パターンの選択(IFFファイル)で、アニメパターンへの対応
	□パターンの編集



○カットブラシ[B
 隅-隅 | 中-隅 |  円   | 楕円  |文字列 | cell  | x=    | y=    | ?    
cutbrushtype = (cutcorner,cutbox,cutcir,cutelps,cutstring,cutcell)
隅-隅 |中-隅 |  円  | 楕円 |文字列| x320 |Bank= | cell | x=   | y=   | ?  
cutbrushtype = (cutcorner,cutbox,cutcir,cutelps,cutstring,cutall,cutbank,cutcell)

■selectルーチンで、通常と逆から選択するとBOXラインが見えない
	FMMOUSE.PAS の revbox を修正(場合分けの厳密化&変数の誤代入の修正)
	□ revxyline を2セット(select2point)でイイのでは？
■画面が640X400の場合、320X200領域外でのカットが無効になっている
	→SUBMUNU.PAS selectcutbrush ルーチンを修正
■HELP表示の後、ブラシ選択済みの動作になる
	getitem(themenu,item) の前行に selectcutstyle := false;
□|中-隅 | の削除 (メニュー領域不足のため)
□|文字列| の削除? (エミュレータでは、日本語関連キー入力が不完全 & メモリの節約)
	□ ''enter の場合、テキストファイルから選択できるようにする
□| x320 | 320X200の範囲を、ブラシとして切り取り
□|Bank= | 現状、ems にコピーされてるブラシの数を１から複数選択可能にする
	(DeluxePaint のように、スペアブラシで十分？)
	Brush Bank | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |s0p|
	□procedure animscreen 'b'呼び出しで, Brush Bank ←→ 320X200
	□ブラシ→スペアブラシ間で変形アニムブラシ
□| cell | x,y での選択範囲で、ブラシを切り取り
	□procedure animscreen からも呼び出しできるようにする
□進行方向、座標相対関係などにより、ブラシの Overlay/Underlay を切替(惑星が太陽を公転)
□進行方向、座標相対関係などにより、ブラシの X-flip, Y-flip などを切替
□裏画面マスクに応じて、fixscreenした画像とブラシの Overlay/Underlay を切替
□ブラシ変形モードを追加(x_flip,y_flip,x_bend,y-bend,拡大縮小回転,四隅自由変形,...)
	変形したブラシに新たなバッファを割当てるとバッファオーバーの可能性有
	→ 変形フラグと変形座標のみで、いちいち毎度に変形させる。
	□ブラシ変形をアニムブラシに変換
□カットブラシ[B を、[回転・拡大・縮小・アニメ]に対応させるまでの暫定策を検討
	(回転だけなら、すでに渦潮が [utrans2 (かなり複雑なオプション)] にある)
	→ [回転・拡大・縮小・アニメ] に特化した別ルーチンを [utrans2] に用意



○アニメカットブラシ[A
 隅-隅 | 円    |Cel→AT|Cel→MT|AnimNo2|総数16 | x =   | y =    | ? ';
cutanimbrtype = (cutabcorner,cutabcir,cutab_cel_at,cutab_cel_mt,cutab_anim2)
隅-隅 |  円  |Cel-At|Cel-Mt|AnimN2|総=16 | x=   | y=   | ? ';

■HELP表示の後、ブラシ選択済みの動作になる
	getitem(themenu,item) の前行に selectcutanimbr := false;
■アニメブラシのカットフレーム数を選択可能にする  animbrframe: integer
□スプライト・シート → アニメカットブラシ
	□|Cel→AT| x,y,カットフレーム数から、選択範囲内を自動的に登録
	□|Cel→MT| x,y の選択範囲を手動で、カットフレーム数分を選択して登録
	■|AnimNo2| EMSop での対応が前提として、x,y,カットフレーム数を設定


○カットブラシ・フィギュア[Bf
■画面が640X400の場合、320X200領域外でのカットブラシtool形状塗り([Bf)が破綻している
	■SYSBRUSH.INC の fillline ルーチンを修正
		real := integer*integer 演算で、real にinteger値が代入されていた
			(integer*integer > 32k で、real < -1)
		→ +0.001 を式に挿入 & 演算の順番を変更 (sbbrushfig, sbanimfig)
	■scanpaint ルーチンを介さず、直接fillline ルーチン を呼んだ方が効率的では？
		paintframe 全体マップが必要な'グラデ塗り円外' の場合分けが必要となる
		バケツ塗りでも、scanpaint が必須なので現状通り
□[Bf塗りの場合、x,y それぞれの繰り返し数を設定可能にする
□line系 & Ntatall の場合は、ブラシを進行ベクトルに向けて回転変形させる
	カットブラシに対する基準角度を任意で設定可能にする
□line系 & continue の場合は、ブラシをビットマップストローク・ブラシに変形
	x,y それぞれの繰り返し数を反映できるようにする



■|源| メニュー名称＆並びの整理  SUBMENU.PAS
	色  |表画|裏画|Undo|Tile|Dist|Grad|Patn|PtCy|Brsh|Bfig|AniB|Afig
→	色  |網  |裏画/Undo/下画/転写|Grad| [] | []c| [B | [Bf| [A | [Af|    |    |Help
→→	色  |網  | [] / [B / [Bf/ [A / [Af|裏画/Undo/下画/転写|Patn|Grad|Filt|Efct|Help
色  |網  |裏画/Undo/下画/転写|Grad| [] | [B | [Bf| [A | [Af|CEL |CELA|Patn|Filt|Help
	sbinktype = (sbfill,sbmae,sbura,sbtemp,sbtile,sbsita,sbgrad,
	             sbpatn,sbpacy,sbbrush,sbbrushfig,sbanim,sbanimfig)
→	sbinktype = (sbfill,sbtile,sbura,sbtemp,sbsita,sbdist,sbgrad,
	             sbpatn,sbpacy,sbbrush,sbbrushfig,sbanim,sbanimfig)

■対象元[表画] 機能確認  point(x,y) と point(x,y) の効果となり、意味がない？
	→ 削除。表画の[inc],[dec]は、一旦コピーした先を参照先として行う


■[Dist] を [下画],[転写] に分ける
	→ [Dist] 選択は、直接参照先を指定するようにする
	□現在の指定が'参照先','参照元'なのか明示する
	■[下画],[転写] で、参照元・参照先の二つのカーソルを表示


□|Grad| メニュー名称＆並びの整理
	円  |縦中|横中|菱中|角中|斜中|斜逆|縦  |縦逆|横  |横逆|横外|逆外|中外|円外|星 
→	円 |縦m|横m|角m|菱m|斜m|斜R|縦 |縦R|横 |横R|x->|x<-|x<>|x><|形 |Bv |BvR|星
	gradtype = (en,entate,enyoko,enhisi,enkaku,ensya,hansya,tate,hantate,
              yoko,hanyoko,yokogai,hanyokogai,enyokogai,encount,hosien);
→	gradtype = (en,entate,enyoko,enkaku,enhisi,ensya,hansya,tate,hantate,
              yoko,hanyoko,yokogai,hanyokogai,enyokogai,hanenyokogai,
              encount,bevel_in,bevel_in_rev,hosien);

■|星 |ルーチンの線条数の値を多角形の値で指定できるようにする
	→ すでに、星型の角数に対応していた
■追加: 'x><'(hanenyokogai) Xラインごとの長さに応じてグラデ、'x<>'(中外)の逆
■追加: 'Bv '(bevel_in) ベベルパターン(外形線より内側へ一定のグラデ)
	■グラデ幅(=スキャン範囲)の設定をどこで行うか検討する
■追加: 'BvR'(bevel_in_rev) bevel_in の反転グラデ
■追加: 'B外'(bevel_out) ベベルパターン(外形線より外側へ一定のグラデ)
	■paintframeスキャン範囲の拡大が必要になる
	→ scanpaint から別ルーチン(bevel_out_paint)を呼んで処理
	□Grad色階調ルーチンを経由していないので、2値誤差とかが無効になる
		□Grad色階調ルーチンを独立させて、別ルーチンからも利用できるようにする
	■'効果'指定、'mask'指定が無効になる
		point tmpc, maskcolor[tmpc] ルーチンがfillline内で指定されている
		→ bevel_out_paint内に該当ルーチンを追加した
	→ 縁取りルーチンへ移動して、|Grad| メニューより削除した
注意: 変数color は、var の systemparam.color  変数c は、sbset(x,y) でのカラー
	→ ルーチン内で変更に注意。下位ルーチンで同名変数宣言しないこと


□|[]| メニューの検討
	□基本の描画方法を選択できるようにする
		□screen axis: 画面の位置を基準にしてタイルを並べる(デフォルト)
		□brush axis : タイルを並べる基準となるのが、描画を開始した位置
		□paint brush: タイルパターンを筆定義パターンとみなして描画
□| []c| を廃止して、| [] | のメニューで選択できるようにする



□|効| メニュー名称＆並びの整理
	通常|平均|比明|比暗|差絶|加算|減算|乗算| inc| dec|Tone|scrn|Wr-B|AlpB|Over|Undr

■| inc| dec| でブラシ側の色が +1, -1 されている
	→ 画面側の色を +1, -1 されるように修正



■|mk| メニュー名称＆並びの整理
		Sp|Cr|Iv|bc|bD|bA|Ok| ?
→		sp/反/無|bA/bD/無|ok| ?

■裏画面マスクの動作が逆では？(現状 0 がマスクされる)
	→ 逆にした。(マスク反転して転送では手間が増えるため)
■裏画面マスク-デジタルでの挙動が変。maxcolorのみがマスク
	→ プログラムミスを修正した(sysbrush.inc)
■裏画面マスク-アナログでの挙動が変。[比較明]が効かない、マスク対象でも描画される
	→ プログラムミスを修正した(sysbrush.inc)
□裏画面マスクに、|bX| を追加。maskに応じてオーバーレイ、アンダーレイの切り替え
	□メニューに空きが無いので、|ok| を削除？
□裏画面マスクをZバッファとみなして重ね合わせをコントロール
□paintframe を裏画面に転送する機能があれば便利か？検討
	ペイントした領域を(undo で復帰させた画像にたいして)反転マスクとして利用
	(要は、マジックワンド範囲選択のような使い方)
	・新規転送(新規マスク範囲)
	・裏画面とOR合成(マスク範囲に追加)
	・裏画面から減算(マスク範囲から除外)


□|対| メニュー名称＆並びの整理
	 OFF |Cycle/     |Place|Centr|X -fp|Y -fp|XY-fp| Tile| 千鳥| 市松|x分割|y分割
→	OFF :| 点対(     /中心)|x-fp /y-fp /xy-fp| Tile/x千鳥/y千鳥/ 市松(x    /y    ) 

■|中心)選択で、[座標中心に復帰]を兼ねる
	→ positionchenge ルーチンを追加した
□エッシャーパターンを追加 
	http://www.randmax.jp/escherpattern/
□エッシャーの反転タイリング(モーフィング)を追加
	https://plaza.rakuten.co.jp/nakabisya/diary/201305110001/
	https://toyokeizai.net/articles/-/8776?page=2


|⇒| TOOL-Morph メニューの検討
□menu1: 

□menu2: 

□menu3:
	線型  |放物線| Trail| Step /	↓
	
	□color を漸次変化させるオプションを設ける
	□line, curve, circle を移動パスとして選択可能にする
	□等速、加速度を選択可能にする




□ラインオプションで、N_Total の分割点ごとにエフェクトルーチンを呼べるようにする
	パラメータ: 座標、方向ベクトル(角度)、筆の大きさ
		□先に、カットブラシでの sbbrushfig ルーチンを実装したほうが楽かも
			□アニムブラシでの sbanimfig ルーチンを実装
			□[C_inc],[C_dec]モード時に、ブラシの拡大縮小
	□角度をもったトゲを交互に
	□ツルマキの発生
	□二分木の再帰図形

□ラインオプションで、始点と終点ごとにエフェクトルーチンを呼べるようにする
	□矢印
	□ロケット、ミサイル、鉛筆
	□チューリップなどの草植物
	□ニョロニョロ


○多角形
■di=0 の次のパラメータは何？
	→ 回転角だった
	■[正多],[星] で、回転角をマウス選択(or 数値入力)できるようにする
	→ 数値入力のまま(TOOL-Morph のため)
□di=0 のパラメータは、右回り 左回り のブーリアン型にして誤入力を防ぐべきか？
□[自由]の追加
	TOOL-Morph を考慮すること
□di=0 のパラメータを、[自由],[正多],[星] にも適用
	→ 数値入力として、TOOL-Morphに対応させる
■バラの選択時、外円径を選択すると、外円径が0になるバグ
	→ select の until → repeat 後に offbutton を追加
	■いつのまにか外円径が0になるバグ再び
	→ 外円径を write でテキスト表示させると、おさまったようにみえる
■星型の[C_dec]モード時、頂点に向かって減衰するようにしたい
	→ 線分の始点と終点を入れ替える方法にした(パスとして使う場合には不具合)
■星型の[C_inc]モードを追加
□対数螺旋の追加
□ポリゴン座標列のファイルへの保存・読み込み・編集


○多角形ペイント
□[自由] 、[正多]、[星]、メニューの追加 
	TOOL-Morph を考慮すること

□[円],[楕円] で、右回り 左回り のパラメータを追加、
□[円],[楕円] で、回転角をマウス選択(or 数値入力)できるようにする
□[円塗],[楕円塗] で、回転角をマウス選択(or 数値入力)できるようにする
	□現在共有しているselectlinestyleを、line,curve,box と分ける必要がある



□塗メニューの検討
	境界塗|free塗| 再塗 |境設定|Grad種/減色法/回=  1/dither/autoCt/幅=  7|塗not0| ?

■境界塗(バケツ塗り) と free塗(グラデーション用)を選択可能にする
	■free塗の試し塗り時、マスク, 裏マスク, ライトテーブルを考慮していない
		■free塗の場合、試し塗りで上書きしてしまうので、効果モードが無効
		→ 処理の前後を変更: FixScreen -- 試し塗り -- UndoFix -- scanpaint
	□free塗が、シンメトリー・モードに対応していない

■再塗(rePaint)を実装。 paintframeをクリアせずに、変更した設定で再ペイント
	現ルーチンでは永久ループとなるため、実行後にモードを'free塗'に戻す
	□edgetype =  none の場合、scanpaint を実行
	□edgetype <> none の場合、edgepaint を実行

□|境設定| メニューの検討 (ペイント処理後、外形線を描画するかどうかの設定)
→ 同系のDrawツールの描画では無く、paintframeに対しての縁取りルーチンで行う
	無  |縁内/縁外|Bv外|凸内/凸外/凹内/凹外|平均|幅 2|縁色|明色/暗色|
	edgetype = (none, edge_in, edge_out, bevel_out, 
		    deko_in, deko_out, boko_in, boko_out, avg_blur)

	□'縁内'(外形線より内側へ縁色で縁取り)の追加
	□'縁外'(外形線より外側へ縁色で縁取り)の追加
	□'Bv外'(外形線より外側へ一定のグラデ) |Grad|メニューからこちらに移行
		メニューで、'Bv外'のバリエーションを選択できるようにする
		bevel_out_type = (standard, bevel_out_rev,
		                  bevel_out_yama, bevel_out_tani)
		■'＼'
		□'／'(外形線より外側へ一定のグラデの反転)の追加
		□'＼／'
		□'／＼'
	□'凸内'(外形線より内側へ明色,暗色で凸陰影付き)の追加
	□'凸外'(外形線より外側へ明色,暗色で凸陰影付き)の追加
	□'凹内'(外形線より内側へ明色,暗色で凹陰影付き)の追加
	□'凹外'(外形線より外側へ明色,暗色で凹陰影付き)の追加
	□'平均'(平均値によるグラデ)の追加
		メニューで、'平均'のバリエーションを選択できるようにする
		avg_type = (avg_out, avg_in, avg_mid)
		□'AvgO'(外形線より外側)の追加
		□'AvgI'(外形線より内側)の追加
		□'AvgM'(外形線を中央値として)の追加
	□境界幅 デフォルトは edge_range = 2
		□境界幅の境目の点列をアンチエイリアスpsetするかどうかの検討
	□縁色 デフォルトは edge_color = 1
		■bgcolor デフォルトは 1
	□明色 デフォルトは mei_color = 12
	□暗色 デフォルトは ann_color = 6

■|減色法|メニューの検討
	|16階調 /8階調下/8階調上|3色階調|2値Baye/2値網点/2値渦巻/2値誤差/2値乱数/明度+
	gradmaxcolortype = 
	  (col16,col8_dw,col8_up,col3,col2_bay,col2_tone,col2_spin,col2_err,col2_rnd)
	明度加算値	hilight_plus : integer

	■2値塗りの場合、カラーによっては擬似階調がほとんど無くなる
	→ 2値塗りの場合、maxcolor を引数としてcurrentcolor,currentbgcolor振分けた
		■systemparam,color が引数なので、maxcolorに代入すると不具合
		→ 一時的にsystemparam,colorをバックアップして処理したあと元に戻す
	■2値塗りの場合、currentcolorの領域を増やすため、オフセット値を加算
		■試しに、+4 して様子をみる
		■|明度+    | として入力可能にする
		□明度値加算を廃止して、GIMPのようにオフセット・パラメータに変更
	■'2値化 ランダム'の追加を検討	| 16階調  |2値:組織的| 2値:乱数 | で切替え
		type gradmaxcolortype = (16col,2col_mat,2col_rnd)
                var gradmaxcolorstyle: gradmaxcolortype
	■現在の'2値:組織的'の参照Dither配列をBayerパターンに変更
		http://www2.tbb.t-com.ne.jp/mark/diza.html
		AGRAPH2.PAS の Dither を修正(Bayerパターンに準拠、似非キースと同等)
	■'2値化 網点'の追加を検討  Dither配列を網点パターン
		AGRAPH2.PAS に Dither2 を追加
	■'2値化 渦巻'の追加を検討  Dither配列を渦巻パターン
		AGRAPH2.PAS に Dither3 を追加
		渦巻のDither配列を http://caca.zoy.org/study/part2.html に変更
	■'2値化 誤差拡散'の追加を検討
		filllineルーチンで誤差を拡散させる一時バッファの導入に見合う効果に疑問
		→ 次(右隣)のピクセルのみ誤差を引き継がせて効果を確認する
			■単純ベタ画像となってしまう
			→ すでに0,15に変換したカラー値を誤差に代入していたのを修正
		右隣のピクセルのみ拡散では、かなり品質が低下する
		■通常の誤差拡散にするか、Usr1|grad|ルーチンに任せるか検討
		→ FloydSteinbergを実装してみたが、以下の問題がある
		■filllineルーチンをcallで、星型などyposが同じになる場合に不具合
			スキャンバッファの入替条件の判定が必要(同じ ypos かどうか)
			ypos_old <> ypos ならば、バッファの入替 & ypos_old = ypos
		■円など x が負数となる場合、runtime error 205
			場合分けを減らすため: スキャンバッファ scan0[-1..rmaxhor + 1]
			x >= 0 のみスキャンバッファを処理
	■'8階調下'の追加を検討  パレット0〜7を8階調明度順とみなして描画
		■足りない階調をディザで補完する
		→ パレットが奇数で < 15 の場合、次のパレットとのディザカラーにする
		→→ パレットが奇数の場合、x,y の格子模様で次色と振り分け
		注意！: 8階調の場合でも16階調から生成するため、maxcolor が基準となる
		■PICOP: COLOR_OP.PAS の [&] 16 ->8color ルーチンを再検討
		■EMSOP: COL_OP_Z.PAS の [&] 16 ->8color ルーチンを再検討
	■'8階調上'の追加を検討  パレット8〜15を8階調明度順とみなして描画
		■足りない階調をディザで補完する
	■'3階調'の追加を検討。足りない階調をディザで補完する
		■カラー0にならない
			→ グラデ塗りの後処理で、c < 1 → c := 1 としていたのを変更
				bgcolorを設定すれば従来通りの意図で描画可能
			16階調では、c = 0 → c:= bgcolor に変更
		■'3階調'選択時に midcolor を選択するようにする
		■選択カラーによっては、階調が極端に減少する
			→ 場合分けでの、colorバックアップ&リストア・ルーチン修正
		■パレット8-15のディザ配列割当てを、パレット0-7と同等にしたい
			→ color8,15 を規定値で、color9-14 を -1 してディザ配列
		□現状の、dither配列がBayerパターンのママでいいかどうか検討
	■2値塗りの場合、maxcolor でも斑点がつく
		color > dither[][] を color >= dither[][] に変更した

□/回=   / cyclic 循環数の設定  grad_times = 1


■/dither/ グラデ塗りの場合、乱数でディザリングをかける
	ditheron : real で切り替え
	[yes]	ディザリング有(デフォルト ditheron = 0.5)
	[no]	ディザリング無(ditheron = 0)
	□現状0.5のディザリング乱数値を変更できるようにする
		現状、グラデ距離に比例して、自動的に乱数の幅を増加しているのでは？

■/autoCt/ 円外グラデ塗りの中心を自動に設定
	paintautocenter: boolean で切り替え

■/幅=   | スキャン範囲(Bevel でのグラデ幅)の設定   scan_range = 7

■|塗not0| ペイント系において、選択図形内の not0 のみ対象とする  paint_not0: boolean
	ペイント処理で、マスクカラー0 との違いは、グラデーション塗りの場合
	適用が限られるので、|設定| の項目で設定する
	■Box塗り対応
	■円塗り対応
	■楕円塗り対応
	■free塗り対応
		試し塗り時のカラーに影響されない処理を考慮
		試し塗りが下地と同色だと見難いので (color - 2) mod (maxcol + 1)






■キー入力の再検討  PGLOBAL.PAS animscreenルーチンの変更
	AutoBr  ブラシを置くたびにフレ−ムを進める	key[a]トグル  key[A]OFF
	消去    画面を選択した色で消去します            key[0]0クリア Key[C]320クリア
	ライトテーブルon/off    key[t]トグル  key[T]OFF
	現座標を表示            key[@]トグル
	現在位置を記憶          key[p]
        記憶した位置に移動      key[P]
        前回描画の開始点に移動  key[(]
        前回描画の終了点に移動  key[)]
        画面中心に移動          key[=]
	グリッドを有効に        key[g]トグル  key[G]メニュー
		([j]で、裏画面のタイルチップを[g]でパターンブラシに拾う準備)
		■16X16, 32X32 のタイルに合わせて切り替える仕組みを設ける
			→ temp_gridx, temp_gridy で、前回の選択を記憶する
		■あらためて動作確認すると、グリッドがズレる 
			→ fmmouse.pas:  x-(x mod gridx),y-(y mod gridy) に変更
	■sWap push0 を追加	key[w]
■カーソルキーで、色・タイルパターン・筆の切り替え
	■エミュのマウスホイールを↑↓に割り当てられるのを考慮して検討
	key[↑] inc burush_num	key[↓] dec burush_num
		BRUSH.PTN の0-7の順番を逆にした
		□selectbrush に対する systemparam.currentbrush の変数スコープが？
	key[→] inc color_num	key[←] dec color_num
	key[]]  inc tone_num    key[[]  dec tone_num
		■TONE_02.PTN の場合、0-4の範囲
      ( key[}]  inc tile_num    key[{]  dec tile_num )
	key[PageUp]  Over	key[PageDown]  Under	インジケーターを付けた
	key[b]                  key[B] 筆選択
	key[i] 色をスポイトで   key[I] 色選択
	key[n] トーンスポイト   key[N] トーン選択
		■key[n] 筆領域の色をカウントして、fgbolor,bgcolor,パターン番号8を設定
			■TONE_02.PTN の場合、パターン番号2を設定
		□色面積比でfgbolor,bgcolorを設定だが、カラーナンバーのほうがイイ？
      ( key[m] タイルスポイト   key[M] タイル選択 )

■ルーペでのキー入力変更
	key[↑] 画面を上に移動	key[↓] 画面を下に移動
	key[→] 画面を右に移動	key[←] 画面を左に移動
        Key[PU] 色pset +1       Key[PD] 色pset -1
	key[i]  色をスポイト    key[I]  色選択
        Key[]]  色番号を１増	Key[[]  色番号を１減
        Key[}]  色pset  	Key[{]  色スポイト


○|図形|の検討。基本は多角形入力ツール
	参考: FantaVision, NAPLPS, FLASH, FM-7アニメツール
□多角形の入力、編集
□入力したデータの拡大、縮小、回転、線形変換 → 変形アニメーションに対応させる
□同数の点の多角形間を変形アニメーション、トレイル描画
□任意の多角形から、任意の多角形への変形アニメーション、トレイル描画
	四角形や単純形状のプリセット
□作成したデータを多角形ツールで読み込み(ツールモーフィングで利用可能にする)
□リンク構造を持った図形(たとえば棒人間)のサポート
	Stykz	棒人形のアニメーション
		https://www.stykz.net/animations.php
		https://forest.watch.impress.co.jp/docs/review/406182.html
	Pivot Animator	棒人間が自由自在にアクションするアニメーション
		https://pivotanimator.net/index.html
		https://forest.watch.impress.co.jp/article/2008/09/12/pivot.html
		http://hsm.on.coocan.jp/pivot-animator.htm
		http://e0166.blog89.fc2.com/blog-entry-525.html
□リンク構造を持った図形をボーンとみなして、カット(アニメ)ブラシの貼り付け


○|拡大|の検討
□ブラシ形状の描画モードを追加
	□2色トーンをサポート。key[n] トーンスポイト   key[N] トーン選択
	□トーンスポイト: ブラシ形状範囲の色をカウントして、2X2の格子トーンをセット
		key[}]  inc tone_num    key[{]  dec tone_num


○Usr1
□メニュー名称＆並びの整理
	|水引 /ボケ /砂目 |滲み |cycle|流線 /流蔓 |
→	|水引/ボケ/砂目|Blot|色回|1Dca|2Dca|grad|凸凹|集中/射光|    |

□ブラシ形状に依存している筆ルーチンに、ブラシ選択メニューを追加
■ライトテーブルに対応
	pset(x,y,c)	→	lt_pset(x,y,c)
	point(x,y)	→	lt_point(x,y)

□|水引| の検討
	■ブラシの指定を brushbox[systemparam.currentbrush] に変更
	■描画中のクロスカーソルを廃止

□|ボケ| の検討
	■ブラシの指定を brushbox[systemparam.currentbrush] に変更
	■描画中のクロスカーソルを廃止

□|Blot| の検討
	■ブラシの指定を brushbox[systemparam.currentbrush] に変更
	■ブラシの形状に応じて、処理する範囲を変更できるようにする
		■ブラシ選択メニューを追加
	■一点ごとにblotするのをやめて、ブラシを描画後まとめてblotに変更

□|色回| の検討
	■ブラシの指定を brushbox[systemparam.currentbrush] に変更
	□ [Ctdec=(全長)],[Ctinc=(全長)],[全長]

□|grad| 画面を paintframe に転送して、ペイント・ルーチンを呼ぶ
paintframe をクリアしないで、色々塗りを試行錯誤可能に (DigiPaint3 での Undo Redo)
	むしろ、グラデ塗り専用ルーチンでもイイのでは？
		□cyclic 循環数の設定は、こちらのみのルーチンで検討
	□GRAD2.pas との住み分け
	□画面を x-スキャンラインした結果を paintframe に転送
	□画面 ← paintframe
	□グラデ塗りに、ベベルパターン(外形線より一定のグラデ)の追加
	□paintframe を y-scanpaint

□|凸凹|凸凹の面を構成する。テキスト用外枠や金属的パネルの表現に使用
	ZPaint		https://www.grafikerler.org/forum/konu/zpaint.13153/
	8bitpccgeditor	http://blawat2015.no-ip.com/~mieki256/diary/20160110.html
		こちらは、実装予定のBGマップエディタの機能と重複するかも？


○Usr2
■メニュー名称＆並びの整理
	流線/流蔓/ひも/鎖 |水流|煙 |火炎|電撃|雨雪|雲 |星  |岩石|草葉|花 |
→	索/蔓/紐/鎖|煙|火|光|電|水|雨/雪|雲|星|石/岩|草/葉/花/竹|

■ライトテーブルに対応
	pset(x,y,c)	→	lt_pset(x,y,c)
	point(x,y)	→	lt_point(x,y)
	SmoothPlot	→	lt_SmoothPlot

□|索(キャット･スプライン)|の検討
	Dot     / Smooth  | 色      |効果mode | fix     / undo    | Quit    
→	 筆   | 色   |筆変化|色変化|描画種|Sm方法|i=    |d=    | Exec /Smooth| Quit 
→→	筆 | 色 |筆変|色変|描種/特種|Sm法|i   |d   |    |    |    |Exec/Smoo|Quit

	■システムマウスカーソルだと、ライトテーブル on でゴミが残る
		→ crosscursor に変更
	■筆形状選択に対応
		→ crosscursor → showrevcursor に変更
		■アンチエイリアス(Smooth)が効いていない
			→ lt_SmoothPlot に受け渡すx,y値をrealにする必要がある
	■筆形状の描画間隔を指定可能にする
		積算距離カウンターの比較値を |i=    | で、設定可能にした
		■autoanimscreen 導入の検討
	■筆形状の描画間隔をカウントして、奇数／偶数で場合分けできるようにする
		odd(counter_sum): counter_sum が奇数のときに true ，偶数のときに false
	□筆変化モード |  固定  |  循環  |  A->B  |A-B-C-A |A-B-C-B |ランダム|
	□色変化モード |  固定  |  循環  |ランダム|        |        |
	□描画種 |単線|複線|三線|虹条|
	→       |単線/set |複線/set |三線/set |虹条/set |
	set      | 筆 | 色 |筆変|色変|[]  |
		ブラシの進行方向の単位ベクトル  (vx, vy)
		ブラシの進行方向の垂直方向の単位ベクトル  upper ( vy, -vx)
		ブラシの進行方向の垂直方向の単位ベクトル  down  (-vy,  vx)
		■|d=    | で、2nd,3rd線の主線からの距離を入力可能に
		□|複線|
			■2ndブラシ、2ndカラーを選択できるようにする
		□|三線|
			■3rdブラシ、3rdカラーを選択できるようにする

□|蔓(流蔓)|の検討
	筆      |色      |Gradmode|効果mode|Smooth  |全長=   |Exec    |Quit   
→	 筆   | 色   |筆変化|色変化|描画種|Grad種|Sm方法|L=    | Exec /Smooth| Quit 

	■[dec] の名称を [全長] として、現在値も表示
	■BRUSH.PTN の0-7の順番を逆にしたことでの不具合を修正
		■SYSBRUSH.INC での該当ルーチンも修正
	■アンチエイリアス(Smooth)のルーチンを|索(キャット･スプライン)|に合わせる
		t_SmoothPlot に受け渡すx,y値をrealにする
		□アンチエイリアスが on だと、グラデーションがマダラになる
	□(書始めと書終わりの)両端でブラシ最小となるモードを追加
	□筆変化モード |  固定  |  減少  |  増加  |  増減  |
	□色変化モード |  固定  |  減少  |  増加  |  増減  |
		□色減少モードを追加
		□色増加モードを追加
	□描画種 | 単色 | Grad |Grad_R|

	□Sm方法 | 明部 | 暗部 | 平均 |
	□total ごとに蔓を巻かせる
	□一定間隔で、枝を発生するツタ

□|ひも|の検討
	 筆     | 色     |Gradmode|        |        | Exec Ov| Exec Ud| quit   
→	 筆   | 色   |描画種|Grad種|      |      |Exe Ov/Exe Ud| fix  / undo | Quit 

	■描画モードの Over と Under を切り替え(描画途中でも、キーで切り替え可能に)
	→ 結局、Under の場合は、fixscreen を参照するようにした
	自動fixscreenをやめて、手動fixscreenにした(任意の時点でコントロールできる)
	autoscreen がキーバッファをクリアするため、同等のルーチンを組み込んだ
		拡張キーは、一度readkeyで#0の場合、再度readkeyで読み取る
	■専用のキー入力ルーチンをやめて、animscreen ルーチンに変更
		animscreen のあとに setbuff を追加
		Over/Under 切替えは、mix = mxover, mix = mxundr で場合分けして処理
	
□ねじりを二本、三本と追加 
□スクリプト(pset,line,curve,...)をロードして、自動描画に対応
□スクリプト内の座標を変形させてのアニメーション

□|煙| の再検討
	現在の円半径増加方法を変更
		□最小、最大半径を設定可能にする
		□最初の座標からの距離に比例して半径を増加させる
	現在の描画方法を変更
		□加算 or inc で描画
		□円内の粒子密度を正規分布にする。粒子数を設定可能にする
	現在の描画方法に追加
		□セル画風(Amiga_16color パレットのうち3色)
		http://www.geocities.jp/popqjp/Tips/Smoke01.html
		http://www.geocities.jp/popqjp/Tips/Smoke02.html

□|光| の検討
	□レーザー光線
	□スペシウム光線
		http://tokusatusokuhou.blog.fc2.com/blog-entry-1632.html

□|電撃| UFRACTAL '放電'の 簡易&マウスで座標指定バージョンとして実装
	ボカシ処理、残光処理は別プログラム(UEMSOP, UFILTER)にまかせる
	■中点変位法法による再帰分割アルゴリズム
	■arctan関数では、-π/2〜π/2までなので、場合わけが複雑
	https://detail.chiebukuro.yahoo.co.jp:443/qa/question_detail/q1423819324
		→ θ = 2*arctan(b/(√(a^2+b^2) + a)) を使う
	□中点からの乱数での変位量、再帰レベルを入力可能にする
	□筆を四角として描画。大きさを変更可能にする
	□box, circle, ellipse に対応
	□ランダムに分岐枝を発生させる頻度と再帰レベルを設定可能にする
	■アニメ対応: 単純繰り返し(固定点で実行の繰り返し)
	□アニメ対応: 単純移動(ラインの始点・終点を移動しながら実行の繰り返し)
	□アニメ対応: ピンポン移動

□|葉| の検討
	□ゆらゆら揺れるアニメーション
		親子関係をつけて根元側ほど低周波、先端ほど高周波で揺らす
		http://www.geocities.jp/popqjp/Tips/Snake/ChildAndParents.html



-----------------------------------------------------------------------------


□1Dセル・オートマタの改良
	□横書き対応。分割数で繰り返し、スクルールアニメに対応
		□分割線で、円柱グラデパターンと合成
	□対数螺旋座標変形で、スクロールアニメ
		極座標変形で、スクロールアニメを参照して検討すること


□正三角形の線分120度2回転によるタイリング


□gradater.pas を変更。メニューによって処理を選択、8方向はテンキーに合わせる
	□グラデ範囲の幅を指定可にして、その両側を 0,maxcolor に塗り分ける
		□ワイプアニメ用マスクとして使えるように幅移動をアニメ化
	□種々のパターンのプリセットをメニューで選択できるようにする


□GRAD2.pas(自動グラデーション) を変更
	□距離0の点のグラデ処理を色指定可能にする(0:現状)
	■グラデーションModeを追加。 3: →1←
	□グラデーションModeを追加。 スキャンラインごとのmax,minをプリスキャン
	□グラデーションModeを追加。 中心グラデ
		グラデ中心: 画面中心(プリセット),入力,paintframeを全スキャン
	■画面0を スキャンXラインした結果を paintframe に書き込み
	■画面0を スキャンYラインした結果を paintframe に書き込み
	■グラデ塗りに、ベベルパターン(外形線より内側へ一定のグラデ)の追加
		→ paintframe=1 の周囲30X30をスキャンして、color 0 との最小距離を求める
		■color設定を反映させる  (結果 = color/maxcolor*最小距離)
		■color値に対して結果が > maxcolor の場合の処理を検討(上限でカット?)
		→ 結果が > maxcolor の場合、maxcolor との差分を maxcolor より引く
	■グラデ塗りに、ベベルパターン(外形線より外側へ一定のグラデ)の追加
		→ paintframe=0 の周囲30X30をスキャンして、color 0 との最小距離を求める
		□color値に対して結果が < 0 の場合の処理
	■グラデ塗りに、ベベルパターン7(外形線より右下外側へ一定のグラデ)の追加
		→ paintframe=0 の周囲30X30を限定してスキャン
		□color値に対して結果が < 0 の場合の処理
	■グラデ塗りに、Avg-out(外形線より外側へ、平均値によるグラデ)の追加
		周囲15X15をスキャンして、平均値を求める
		■'平均'に変更。スキャン範囲を変数として入力可能にした
	■グラデ塗りの場合、グラデ幅を指定可能にする
		→ スキャン範囲を変数として入力可能にした
		■スキャン範囲=6 の場合、全面color設定で塗り潰される場合がある
			→ 条件判断をreal値で行ったあと、integer値を使用した為の誤差
		■アニメ対応。グラデ幅を増減
			0: スキャン範囲(固定値)
			1: 0 → スキャン範囲(一定増加)
			2: 0 → スキャン範囲(一定増減) → 0
			3: 0 → スキャン範囲(sin増減) → 0
		処理フレームごとに中断ルーチン(if keypressed then exit)を追加
	■'縁取り' を追加
		増減アニメのため、条件(paintframe = 0 & 対象外)で pset(x,y,0)
	■'トリミング' を追加
		元の画像を残して上書き(増減アニメには不向き)
	■グラデ塗りに、'凸-out'(外形線より外側へ凸陰影付き)の追加
		照明側、影側の色を入力できるようにした
                Bevel-out と Solid-out ルーチンを統合した
		■グラデ塗りに、'凹-out'(外形線より外側へ凹陰影付き)の追加
	■グラデ塗りに、'凸-in'(外形線より内側へ凸陰影付き)の追加
                Bevel-in と Solid-in ルーチンを統合した
		■グラデ塗りに、'凹-in'(外形線より内側へ凹陰影付き)の追加
	■グラデーションModeを追加。 4: 始点,終点の色を拾得して始点-終点グラデ
	■グラデーションModeを追加。 5: 始点,終点の色を拾得して始点-Maxcolor-終点グラデ
	□Preset-Animation を、メニューで選択して実行できるようにする
		□縁取りの輪が広がっていくアニメ
	□UFILTERカテゴリへ移動


■かごめルーチンを検討 (upatgen2 → s\pt5.pas)
	参照先のアニメ・ナンバーの優先度を 0>1>2>0>.... として、合成
	■優先順序を選択可能に
	□サンプルパターンで、色がズレていく？
	■アニメフレーム 1,2,3 から参照先画像位置にコピーする機能をつける
		paintで、ライトテーブルをオンにすると、確認しながら描画できる
	■アニメフレーム 1,2,3,4 から合成。(1,2,3だとトータルで奇数フレームのみ有効)
		この場合、優先順序は選択できない
□かごめルーチンをペイントシステムにも導入すべきか？
	■Totalstep が多い場合、アニメ・フレームを進めず総フレーム数に収めるモード
		変数dotstepを導入。(i mod dotstep)=0 でないとautoscreenさせない
		→ とりあえずは、円描画ルーチンのみに適用した
		→ line, 曲線, 楕円ルーチンにも適用した
		line, 曲線のループ変数: 0 → n-1 :(i+1) mod dotstep
		円,   楕円のループ変数: 1 → n   :i mod dotstep
	□参照先をアニメフレームに、優先度を 1>2>3>..>最終フレーム>1 として合成
		とりあえずは 1>2>3>1 の簡易バージョン

□複眼ルーチンを再検討 (ufilter → s\fuku.pas)
	六角形タイルパターンをディストーションフィルタとして元画像を変形させる
		■現状の s\fuku.pas は、s\slit.pas に変更
			→ 結局、削除した
	■まず、わかりにくい現状 [umapping] の置き換えマップルーチンを変更
		□参照元がFixscreenなのが冗長すぎる。frame320の活用を検討
	■六角形タイルパターンは、細胞分割(borocell.pas)のハニカム配置で実現した

□細胞分割(ボロノイ)を再検討 (upatgen → s\borocell.pas)
	■膜より単純距離グラデーション・モード
		→ 無理があったので、「核より単純距離グラデーション・モード」を実装
	■画面をスキャンして、配置配列に入れるモード(お絵かきエフェクト？)
		□隙間無く配置を構成するために、スキャン範囲の拡大が必要
	■配置間隔を指定してハニカム配置
		→ 六角形の隙間なし並べは難しいので、六角形配置にした
		□もう一段個数を増やすか、段数を選択可能にする
		→ 六角形配置,平面配置とウロコ平面を選べるようにした
		ウロコ平面は「[D] 核 draw」で描画
			□「[D] 核 draw」の半径を選択可能にする
			□描画方式も選択可能にする (通常、比較明、平均)
			□描画順序のx,yを切り替えれるようにする
		□回転のサポート(アニメ対応でも必要？)
		■配置間隔によっては、配置個数が dottotal を超えるチェックが無かった
		□外円を設定可能にする。外円からの距離も最短距離比較の対象にする
	□シームレス・パターンになるようなランダム配置間隔
	□核二等分線より単純距離グラデーション・モード(ドロネー三角形分割)
		→ 実装をあきらめた。替わりに「膜より一定距離で maxcolor->0」を実装
	□アニメ対応	核回転, 核単振動
	□アニメ対応	布が波打つアニメーションのようなもの
		http://blog.higashisanmyaku.jp/?page=6
		https://imgur.com/gallery/rEmclsS
	□アニメ対応	ランダムウォーク
		要素の総和が0となる配列x,yをn個用意。乱数で要素をシャッフル
		  カウント数 mod (n+1) で、適用する細胞を選ぶ
		    → 挙動に規則性が出るので、255個のバイト型配列を用意したほうが？
	■dotarray構造体のうち、距離を保存する len は必要なのか？xdot,ydot もsingle可？
		→ xdot,ydot,id1,id2 とし、すべて integer にした
		C=a^2+b^2 で、Cがrealでもa,bがintegerの場合→ Cにintegerが格納される
			integerのmaxは32kのため、これより大きいと負数が格納される
			→ a+0.001 として、Cにrealで格納されるようにした
			この変更で、dots[0] の領域が0になるバグが解消された
	■dotarray構造体 id1 に、参照画面の9pixelの平均値を格納。
		x,y座標の最近傍の値で、pset。→ クリスタルフィルタ？
	□アニメ対応	円の拡縮振動(円の中には配置しない。円の拡大に合わせて移動)
	□アニメ対応は、モードによって選択肢が複雑になる
	→ スキャンモードと、それ以外ではメニューを出してイチイチ選択させる

□接触充填球 setuen.pas の見直し
	□データ配列をシンプルに。アニメ対応の配列を無くして、カウント数の mod で分岐
	□接触充填球モードでも配列に格納して、点pset。→ スキャンして細胞分割


○UFRACTAL
□フラクタル・ノイズの実装 gfxfx2.zip の plazuma.pas を参考にする

□現状の plazuma.pas(中点変位法によるランダム・フラクタル) の見直し
	静止画モード	新規に適用, 画面に適用, 画面の0部分に適用
			fix0を変換行列とみなして、画面1を変換
	動画モード	フレーム画面に適用, フレーム画面の0部分に適用
			fix0を変換行列とみなして、画面1を変換
			画面分割サイズに応じてスクロール

□放電ラインの実装。PST Usr2 |電撃|とは別物をUFRACTALのカテゴリに
	AfterEffect での稲妻パラメータ
		https://riotproducts.co.jp/design-studio/advanced-lightning/
	■中点変位法法による再帰分割アルゴリズム
	■arctan関数では、-π/2〜π/2までなので、場合わけが複雑
	https://detail.chiebukuro.yahoo.co.jp:443/qa/question_detail/q1423819324
		→ θ = 2*arctan(b/(√(a^2+b^2) + a)) を使う
	□中点からの乱数での変位量、再帰レベルを入力可能にする
	□筆を四角として描画。大きさを変更可能にする
	□ランダムに分岐枝を発生させる頻度と再帰レベルを設定可能にする
	□ラインの始点・終点の組み合わせをファイルから読み込んで実行
	□ラインの始点・終点の組み合わせのプリセットメニュー
		□多角形を構成(擬似的に円環電光)
		□内半径(または原点) → 外半径: それぞれの円周上の点を結ぶ
		□直線A → 直線B: それぞれの直線上の点を結ぶ
	■アニメ対応: 単純繰り返し(固定点で実行の繰り返し)
	□アニメ対応: 単純移動(線分割点を移動しながら実行の繰り返し)
	□アニメ対応: ピンポン移動(それぞれ移動方向の初期値はランダムに決定)


○UFILTER
■3X3 畳み込み演算によるフィルタ mat2d.pas の再検討
	→ 各項の総和を求めて、各項を総和で割り算したものを足し算するようにした
	■オペレータそれぞれを、変更に合わせて修正
	■機能メニューで、オペレータを選べるようにする
	■内側へのボカシ  pointカラーを逆転して処理
		→ □あまり効果がみられない

■5X5 のボカシフィルタ。(diffuser.pas の 7X7 で十分？)
	GRAD2.pas に、スキャン範囲を可変にしたボカシルーチンを実装した
□ボカシをグラディーションに変換するグラディエント・パスもどき
	トーンカーブで対応：	／ → ＼
				／ → ／＼
	数本の色をmaxcolorで残してから、3X3ボカシの適用

□diffuser.pas で、端に色がかかっている場合にゴーストが出る
	□画面外の取り込みを端から延長した色にて処理する

■レリーフ(dif.pas)を削除(3X3 畳み込み演算フィルタで十分？)	
	■修正して、gradater.pas or dither.pas に再組み込みを検討
	→ dither.pas に組み込んだ
■砂目(sand.pas)を削除
	指定した座標の色を乱数で +1 or -1 するルーチンにバグを発見
	■バグを修正して、gradater.pas or dither.pas に再組み込みを検討
		□乱数での偏りで、-1側が少ない
	→ dither.pas に組み込んだ

■dither.pas を変更。それぞれの処理をモードで選択するようにする
	■それぞれの処理の参照を画像1にするよう変更
	■2値化 ランダム+ パターン の場合、色0をスキップする
	■AGRAPH2.PAS に追加した、組織的Ditherパターン配列に合わせて処理を追加する
		Dither(Bayerパターン), Dither2(網点パターン), Dither3(渦巻パターン)
		■AGRAPH2.PAS のDITHPLOT(Bayer限定)を呼ぶのをやめて、自前で処理する
	■'2値化 ランダム' の場合、閾値を入力可能にする ■色0をスキップする
	■誤差拡散モードで、FloydSteinberg他いくつかの誤差拡散を試す
	https://blogs.yahoo.co.jp/gogowaten/15384380.html
		■'2値化 誤差拡散-FloydSteinberg' を追加
		■'2値化 誤差拡散-Atkinson'       を追加
		■'2値化 誤差拡散-Atkinson+test'  を追加
			Atkinsonでは、誤差の2/8は捨てているのを変えて重み付けを変更
	■'3: 2値化 誤差拡散 4: パターン+誤差' の削除
	■PST '2値化 誤差拡散' にあわせて、スキャンバッファ scan0[-1..321]
	■'2値化 ランダム+ パターン' を削除。ditherメニューをフラットにする
	■'2値化 ditherパターン','2値化 誤差拡散'で、色0をスキップする
		(BGカラーが設定された場合、対象と背景を区別するため)

■edge.pas を変更。8方向はテンキーに合わせる
	□削除して、edge2.pas に統合
■iir.pas を変更。8方向はテンキーに合わせる
	□削除して、edge2.pas に統合

□edge2.pas を追加。任意の幅で、画像の縁取りと縁取りシャドゥを行う
	■hscopy(1), 近傍1(3X3)で、point(x,y+200)の加算>0 ならば指定カラーをpset
		指定カラーのデフォルトは maxcolor
	元画像の外側縁取りのみ残す
		push(0), hscopy(1), cls(0), exe, pop(0), picop:move-'not0 to mask0'
	元画像の内側縁取りのみ残す
		push(0), hscopy(1), cls(0), exe, pop(0), picop:move-' 0 to 切り取り'
	□実行回数を指定可能にする
		□指定カラーから回数ごとに color := color-1 (ただし、color > 0)
		□指定カラーから回数ごとに color := color+1 (ただし、color <= 15)
		□指定カラーから回数ごとに color := color*(1-回数/総回数)
		□指定カラーから回数ごとに color := color-1, 1, color+1 の繰り返し
	■近傍(3X3)がスクリーン座標外の処理の変更(現状:0を返す)
		→ '近傍の値を代入'する処理に変更
	■[T] トリミング処理を追加 (0..maxcol → maxcol, 0 と見なして処理)
	■スキャン範囲(= 縁取りの幅)を変数として入力可能にした



○UTRANS
□vect.pas 線形変換ルーチンを再検討




○UMAPPING
□'TimeDisplace(時間置き換え)' を追加。  After Effectsのエフェクトを参考

□'Wave Map(減衰振動)' W-MAP2Z.pas を再検討
	■scan実行で、runtime error 200。Animate実行では問題なし
		→ iii, fnr に初期値が代入されてなかった
		W-MAP1Z.pas, W-MAP3Z.pas も細部修正した
	■reflection(屈折による歪量)を後から入力可能にする
		W-MAP1Z.pas も変更
	■'データファイルの書式'のヘルプをつける
		W-MAP1Z.pas, W-MAP3Z.pas も変更した
	□W-MAP1Z.pas と W-MAP2Z.pas の統合

□'Wave Map 3' W-MAP3Z.pas を再検討
	■Depth(写像の回数)を後から入力可能にする




○PICOP
■picop と paint で、push0, pop0 のキーコマンドを合わせる
	picop:  [8] push 0      [9] pop 0
■カットブラシの保存フレーム ←→ 画面
	   brush→ screen0		emstoscrn((2+1)*animofset+3)
	(  pop0 → screen0		emstoscrn((2+1)*animofset+1)  )
□[B] Brush OP を追加して、ブラシ処理
	□paint と picop の連絡のために、グローバル変数を割り当て
	□カットブラシを画面中央に。元の位置に復帰
	□ブラシ加工後の大きさに合わせて、ブラシ変数を変更
■[M] effect Moveに追加。座標に応じてオーバーレイ、アンダーレイの切り替え
	O : Overlay        U : Underlay
	H : O/U 水平change V : O/U 垂直change    (鎖の表現が可能になる)
	■裏画面(mask)に応じてオーバーレイ、アンダーレイの切り替え
		B : O/U 裏画面mask
	■emsop の[M] effect Move anim も合わせて変更
■[M] effect Moveを変更。screen合成の処理を変更
	(15-c1)*(15-c2)/15 → 15-(15-c1)*(15-c2)/15
	■emsop の[M] effect Move anim も合わせて変更
	■SYSBRUSH.INC の mxscrn も合わせて変更
■[M] effect Moveを変更。cross xline, cross yline, cross stetch を削除？
	→ overlay+平均 よりも、合成結果が有意な場合があるので、not0 to に変更して残す
	■emsop の[M] effect Move anim も合わせて変更
□[M] effect Moveに追加。トーンの配分による合成
	□emsop の[M] effect Move anim も合わせて変更
■[M] effect Moveに追加。マスク作成
	■emsop の[M] effect Move anim も合わせて変更
	■UFILTER.PAS より マスク作成 を削除
	□あらたに masK OP を追加して、境界のボカシ等を追加
■[M] effect Moveに追加。-90°回転(トリム)
	■emsop の[M] effect Move anim も合わせて変更
■[M] effect Moveに追加。Over/Under(相手が0の場合はそのまま)+平均
	■emsop の[M] effect Move anim も合わせて変更
■テンポラリ画像ファイルの入出力
	to dark, to light は、削除(copy&effect の dec not0, inc not0 で代用)
■「パレットを明度順に並び替えて、色ソート」が不自然な結果になる
	→ AGRAPH2.PAS のルーチン変更。R,G,B の錯体反応による重み付けをやめる
■[G] グラフィック画面表示 で、カーソルをoffにする
■color change 系の一部を、[X] eX Color OP としてまとめる
	■トーンカーブ処理を追加。背景の0に影響を与えずに処理
		■UFILTER.PAS より トーンカーブ を削除
	■Amiga DigiView の色配置を明度順に変更するルーチンを復活した
■PALOP.PAS に、TIC-80 のパレットを追加
■PALOP.PAS の、サンプルパレットの名称変更
□PALOP.PAS の、[D] が簡易版のため、'PAL\*.PAL'以外のディレクトリマスクが選択できない
■[4] pic ->frame [5] pic<- frame を追加
	■アニメframe の任意の二枚を差し替えれるようにする
	→ swap frame を追加するより、swap push0 のほうが汎用的
	■[W] sWap push0 を追加(frame320toframe0 も FRAMELIB.PAS に追加)
		emstoframe320(0,(2+1)*animofset+1);
		scrntoems((2+1)*animofset+1);
		frame320toframe0(0);
■[J] swap page を追加
■[O] dest[=] として、[=]の場合は destination := source; (上書き準備)
■[A] MAG画像のロードルーチンを削除
■paint で、[6],[7] をアニメ関連で使用するため、裏画面関連とtemp画像関連キーを変更
	[.] ->page1     [,] <- page1
	[>] ->tmp_file  [<] <- tmp_file
	■PGLOBAL.PAS animscreenルーチンも変更
■[M] effect Moveに追加。組織的ディザの配分による合成
	■emsop の[M] effect Move anim も合わせて変更
■COLOR_OP.PAS の [&] 16 ->8color ルーチンをペイント8階調グラデルーチンに合わせた
	■EMSOP: COL_OP_Z.PAS の [&] 16 ->8color ルーチンも合わせて変更




○EMSOP
■アニメ再生で、裏画面を破壊しない方法(スムース表示を諦める？)を検討
	→ 裏画面(screenad(access,display))を fixscreen しておき、処理後 undo で復帰
	■再生スピードが速すぎるので、適切なウェイトを入れる
		→ delay(30)
■メニュー配置を picop と合わせる
	■emsop に compress 1/n を追加
	□UTRANS.PAS から compress 1/n を削除
	□UTRANS.PAS から Comp 対称 1/4 を削除
		□emsop, picop の compress 1/n に Comp 対称 1/4 を追加
	■emsop から、 dissolve copy を削除(wipe -> dissole ルーチンと重複)
■emsop に slit wipe をインクルードして、Wipe OP。 UWIPE.TPU を削除
	■UFILTER.PAS より スリット加工 を削除
■[M] effect Move x-flip が不具合。ソース整形時、picop に合わせたためにエンバグ
	→ scroll, trim scroll, x-flip, y-flip を修正した 
■[4] pic ->first  → [4] pic->frames に変更。範囲指定できるようにする
■[X] eX color OP を追加
	■[%] 16 ->8color [#] swap 8color を eX color OP へ移動
■[O] dest[=] として、[=]の場合は adestination := asource; (上書き準備)
■[M] %: srol(%) を追加。総移動量と見なしてanimframeごとの移動量を増加させる
	(スクロール・アニメーション)
	■picop の[M] effect Move anim も合わせてメニューのみ変更
■[M] effect Moveに追加した'組織的ディザの配分による合成' を、閾値を変化してアニメ
	■WIPE.PAS の方に追加。dissolve(組織的ディザ: Bayer 配列)




------------------------------------------

ease：インとアウトをなめらかに
linear：一定
ease-in：ゆっくりイン
ease-out：ゆっくりアウト
ease-in-out：ゆっくりインしてゆっくりアウト
cubic-bezier(値, 値, 値, 値)：独自に設定

線型  |放物線| Trail|



S字		前後左右
あおむけ
うつぶせ
しならせる
すり足
ダンス
ムーンウォーク
飲み込んで消化
へこませる	前後左右
引っ張る	前後左右
曲げる		前後左右
傾ける		前後左右
つまみ上げる	前後左右
曲げながら回す
曲げ切る
曲線でふくらませる
曲線で先太り
曲線で末細り
曲線の先細り
曲線の末広がり
ツイスト	前後
左右のフェイント
細く
縮める
伸び縮み
深呼吸
先細り
先太り
太らせる
中央部のロール
直線でふくらませる
直線で先細り
直線で先太り
直線で末広がり
直線で末細り
直線で両端を広げる
平らにする
末広がりと先細り
溶かす
両端を下げる
両端を上げる
両端末広がり



